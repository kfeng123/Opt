theSigma=rep(0,p*p)
dim(theSigma)=c(p,p)
theSigma=V%*%D%*%D%*%t(V)+diag(rep(1,p))
#    beta=(diag(p)-V%*%t(V))%*%rnorm(p)
#    beta=beta/sqrt(sum(beta^2))
#    beta=sqrt(betaMod)*beta
myN=NULL
XuN=NULL
hhh=NULL
hhh2=NULL
for(i in 1:1000){
generateData=function(){
X=rep(0,n*p)
dim(X)=c(n,p)
U=rnorm(n*r,0,1)
dim(U)=c(n,r)
Z=rnorm(n*p,0,1)
dim(Z)=c(n,p)
X=U%*%D%*%t(V)+Z
}
X=generateData()
myE=rnorm(n,0,1)
dim(myE)=c(n,1)
hhh=c(hhh,sum(myE^2)/(t(myE)%*%solve(X%*%t(X))%*%myE))
hhh2=c(hhh2,sum(myE^2)/(t(myE)%*%solve(X%*%(diag(p)-V%*%t(V))%*%t(X))%*%myE))
}
par(mfrow=c(1,2))
hist(pnorm((hhh-(p-n))/sqrt(2*(p-n))))
hist(pnorm((hhh2-(p-n))/sqrt(2*(p-n))))
a=pnorm((hhh-(p-n))/sqrt(2*(p-n)))
b=pnorm((hhh2-(p-n))/sqrt(2*(p-n)))
a-b
a
b
a
b
a
b
a
b
a
b
a
b
a
b
a
b
a-b
a
b
a
b
a
b
a
b
mean(abs(a-b))
r=1
p=1000
n=10
TheLambda=p/150
if(r!=1){
D=diag(rep(sqrt(TheLambda),r))
}else{
D=TheLambda
dim(D)=c(1,1)
}
V=rnorm(p*r,0,1)
dim(V)=c(p,r)
V=svd(V)$u
theSigma=rep(0,p*p)
dim(theSigma)=c(p,p)
theSigma=V%*%D%*%D%*%t(V)+diag(rep(1,p))
#    beta=(diag(p)-V%*%t(V))%*%rnorm(p)
#    beta=beta/sqrt(sum(beta^2))
#    beta=sqrt(betaMod)*beta
myN=NULL
XuN=NULL
hhh=NULL
hhh2=NULL
for(i in 1:1000){
generateData=function(){
X=rep(0,n*p)
dim(X)=c(n,p)
U=rnorm(n*r,0,1)
dim(U)=c(n,r)
Z=rnorm(n*p,0,1)
dim(Z)=c(n,p)
X=U%*%D%*%t(V)+Z
}
X=generateData()
myE=rnorm(n,0,1)
dim(myE)=c(n,1)
hhh=c(hhh,sum(myE^2)/(t(myE)%*%solve(X%*%t(X))%*%myE))
hhh2=c(hhh2,sum(myE^2)/(t(myE)%*%solve(X%*%(diag(p)-V%*%t(V))%*%t(X))%*%myE))
}
par(mfrow=c(1,2))
hist(pnorm((hhh-(p-n))/sqrt(2*(p-n))))
hist(pnorm((hhh2-(p-n))/sqrt(2*(p-n))))
a=pnorm((hhh-(p-n))/sqrt(2*(p-n)))
b=pnorm((hhh2-(p-n))/sqrt(2*(p-n)))
qnorm(0.95)
qnorm(0.95)-1
(qnorm(0.95)-1)/sqrt(2)
(qnorm(0.975)-1)/sqrt(2)
install.packages("highD2pop")
vignette(package="highD2pop")
help(package="highD2pop")
CVind<-function(n){
l<-1
CVind<-matrix(1,n*(n-1)/2,n)
J<-K<-numeric(n*(n-1)/2)
for(j in 1:(n-1))
{
for(k in (j+1):n)
{
CVind[l,c(j,k)]<-0
J[l]<-j
K[l]<-k
l <- l + 1
}
}
return(list(CVind = CVind , J = J , K = K))
}
CVind(10)
CVind(5)
devtools::install_github("hadley/devtools")
.libPaths()
?lm
cars
data<- cars
str(cars)
lm(speed~dist)
lm(speed~dist,data)
?ls
?get
get(lm)
get("lm")
lm
globalenv
globalenv()
environment()
paraent.env()
pararent.env()
parent.env()
parent.env(globalenv())
search()
a<-parent.env(globalenv())
a
parent.env(a)
search()[1]
paramen.env(search()[1])
parent.env(search()[1])
?search
e <- new.env()
ls(e)
e$lm <- lm
ls(e)
e$lm
e$lm <- 1
ls(e)
a<- function(){1}
a<- 10
e$a <- 10
e$b <- e$a
e$a
e$b
e$a <- 20
e$a
e$b
e$a <- c(1,2,3)
e$b <- e$a
e$a[1] <- 1
e$b
e$a[1] <- 3
e$b
e$a
library(pryr)
library(help=pryr)
f
a<-lm
environment(a)
e$a <- a
environment(e$a)
j<-environment(e$a)
parent.evn(j)
parent.env(j)
parent.env(parent.env(j))
parent.env(parent.env(parent.env(j)))
parent.env(parent.env(parent.env(parent.env(j))))
parent.env(parent.env(parent.env(parent.env(f))))
parent.env(parent.env(parent.env(parent.env(pryr::f))))
parent.env(f)
parent.env(pryr::f)
parent.env(pryr::fget)
parent.env(lm)
e<-new.env()
e$a <-1
?formula
?formula
e
exp(1)
exp(1)-2.5
exp(1/2)-2.5
exp(1/2)-13/8
ans
4*(exp(1/2)-13/8)
a<- c(-.81,-.39,-.39,-.08,.69,.71,1.28,1.32,1.89,4)
var(a)
mean(a)
64/24
mean(a^2)
64/3.4/8
source('./dataGen.R', echo = TRUE)
source('./statistics.R', echo = TRUE)
doit <- function() {
# J
tmp <- lapply(1:K,function(i){
tmp <- rep(0,n[i]*K)
dim(tmp) <- c(n[i],K)
tmp[,i] <- 1/sqrt(n[i])
tmp
})
NEW.J <- do.call(rbind,tmp)
# C
tmp <- t(NEW.J)%*%rep(1,sum(n))
C <- eigen(diag(K)-tmp%*%t(tmp)/sum(n))$vectors[,-K]
#SNR
tmpMu <- do.call(cbind,mu)
for(i in 1:K){
tmpMu[,i] <- tmpMu[,i]*sqrt(n[i])
}
tmpMuF <- tmpMu%*%C
tmpSigEig <- eigen(Sigma)$values[-1]
tmpCon <- sqrt(SNR*sqrt(sum(tmpSigEig^2))/sum(tmpMuF^2))
for(i in 1:length(mu)){
mu[[i]] <- mu[[i]]*tmpCon
}
pb <- txtProgressBar(style = 3)
jCX <- rep(0, 1000)
jNEW <- rep(0, 1000)
jSC <- rep(0, 1000)
for (myIterator in 1:1000) {
X <- lapply(1:K, function(k) {
dataGen(n[k], p, mu[[k]], Sigma)
})
theCXstat <- CXstat(n, p, K, X)
tmp <- NEWstat(n, p, K, X,NEW.J=NEW.J,C=C)
theNEWstat <- tmp$stat
Zinv <- tmp$Zinv
tmp <- SCstat(n, p, K, X,NEW.J=NEW.J)
theSCstat <- tmp$stat
myGram <- tmp$myGram
tmpNEWstat <- rep(0, B)
tmpCXstat <- rep(0, B)
tmpSCstat <- rep(0, B)
for (xxx in 1:B) {
theOrder <- sample.int(sum(n))
thePer <- myPer(n, p, K, X, theOrder)
tmpCXstat[xxx] <- CXstat(n, p, K, thePer)
tmpNEWstat[xxx] <-
NEWstat(n, p, K, thePer, Zinv[theOrder, theOrder],NEW.J=NEW.J,C=C)
tmpSCstat[xxx] <-
SCstat(n, p, K, thePer, myGram = myGram[theOrder, theOrder],NEW.J=NEW.J)
}
if ((sum(tmpCXstat >= theCXstat) + 1) / (B + 1) <= 0.05)
jCX[myIterator] <- 1
if ((sum(tmpNEWstat >= theNEWstat) + 1) / (B + 1) <= 0.05)
jNEW[myIterator] <- 1
if ((sum(tmpSCstat >= theSCstat) + 1) / (B + 1) <= 0.05)
jSC[myIterator] <- 1
setTxtProgressBar(pb, myIterator / 1000)
}
close(pb)
return(data.frame(
SNR=SNR,
CX = mean(jCX),
SC = mean(jSC),
NEW = mean(jNEW)
))
}
tmpList<-NULL
for(SNR in seq(0,10)){
B = 100
# sample number
K = 3
n <- c(10, 10, 10)
p = 100
Sigma <- diag(p)
Sigma[1,1]<- p
#mu <- list(rep(1, p), rep(-1, p), rep(0, p))
mu <- list(c(rep(1, p/5),rep(0,4*p/5)), c(rep(0, p/5),rep(1, p/5),rep(0, 3*p/5)), rep(0, p))
#SNR <- 0
(tmpFram<-doit())
tmpList<-c(tmpList,list(tmpFram))
}
theOut<-do.call(rbind,tmpList)
write.csv(theOut,"3p100.csv",row.names=FALSE)
#########################################################################
a<-read.csv("3p50.csv")
b<-read.csv("3p75.csv")
c<-read.csv("3p100.csv")
tmp<-merge(a,b,by.x="SNR",by.y="SNR")
tmp<-merge(tmp,c,by.x="SNR",by.y="SNR")
library(xtable)
zzz<-xtable(tmp,digits=3)
print(zzz,include.rownames=FALSE)
#########################################################################
##### plot(ecdf(jjj))
#
# TheoryCDF <- function(x){
#     tmp <- uniroot(function(t){gamma(t)-((K-1)/2)},c(1,100))$root
#     exp(-tmp*exp(-x/K))
# }
#
# curve(TheoryCDF,from=-10,to=30,add=TRUE)
source('./dataGen.R', echo = TRUE)
n1 <- 10
n2 <- 100
n3 <- 1000
x[1]=rnorm(n1,0,1/n1)
x[2]=rnorm(n1,0,1/n1)
x[3]=rnorm(n1,0,1/n1)
x <- null
x[1]=rnorm(n1,0,1/n1)
x <- NULL
x[1]=rnorm(n1,0,1/n1)
x <- []
x <- 1
x[1]=rnorm(n1,0,1/n1)
x <- vector()
x[1]=rnorm(n1,0,1/n1)
x <- vector(3)
x <- rep(0,3)
x[1]=rnorm(n1,0,1/n1)
x <- rep(0,3)
x[1]=rnorm(1,0,1/n1)
x[2]=rnorm(1,0,1/n2)
x[3]=rnorm(1,0,1/n3)
n<- NULL
n[1] <- 10
n[2] <- 100
n[3] <- 1000
f <- function()
n<- NULL
n[1] <- 10
n[2] <- 100
n[3] <- 1000
x <- rep(0,3)
x[1]=rnorm(1,0,1/n[1])
x[2]=rnorm(1,0,1/n[2])
x[3]=rnorm(1,0,1/n[3])
a <- 0
for(i in 2:3)for(j in 1:(i-1)){
a<- a+n[i]*n[j]/(n[i]+n[j])*(x[i]-x[j])^2
}
b <- 0
for(i in 2:3)for(j in 1:(i-1)){
b<- b+n[i]*x[i]^2
}
b <- b-sum(n)*(sum(n*x)/sum(n))^2
list(a,b)
}
f <- function(){
n<- NULL
n[1] <- 10
n[2] <- 100
n[3] <- 1000
x <- rep(0,3)
x[1]=rnorm(1,0,1/n[1])
x[2]=rnorm(1,0,1/n[2])
x[3]=rnorm(1,0,1/n[3])
a <- 0
for(i in 2:3)for(j in 1:(i-1)){
a<- a+n[i]*n[j]/(n[i]+n[j])*(x[i]-x[j])^2
}
b <- 0
for(i in 2:3)for(j in 1:(i-1)){
b<- b+n[i]*x[i]^2
}
b <- b-sum(n)*(sum(n*x)/sum(n))^2
list(a,b)
}
[a,b]
c(a,b)
ccc<-NULL
ddd<-NULL
for(i in 1:1000){
tmp<-f()
ccc<-c(ccc,tmp[1])
ddd<-c(ddd,tmp[2])
}
plot(ccc,ddd)
ddd
f <- function(){
n<- NULL
n[1] <- 10
n[2] <- 100
n[3] <- 1000
x <- rep(0,3)
x[1]=rnorm(1,0,1/n[1])
x[2]=rnorm(1,0,1/n[2])
x[3]=rnorm(1,0,1/n[3])
a <- 0
for(i in 2:3)for(j in 1:(i-1)){
a<- a+n[i]*n[j]/(n[i]+n[j])*(x[i]-x[j])^2
}
b <- 0
for(i in 1:3){
b<- b+n[i]*x[i]^2
}
b <- b-sum(n)*(sum(n*x)/sum(n))^2
c(a,b)
}
ccc<-NULL
ddd<-NULL
for(i in 1:1000){
tmp<-f()
ccc<-c(ccc,tmp[1])
ddd<-c(ddd,tmp[2])
}
plot(ccc,ddd)
f <- function(){
n<- NULL
n[1] <- 100
n[2] <- 100
n[3] <- 100
x <- rep(0,3)
x[1]=rnorm(1,0,1/n[1])
x[2]=rnorm(1,0,1/n[2])
x[3]=rnorm(1,0,1/n[3])
a <- 0
for(i in 2:3)for(j in 1:(i-1)){
a<- a+n[i]*n[j]/(n[i]+n[j])*(x[i]-x[j])^2
}
b <- 0
for(i in 1:3){
b<- b+n[i]*x[i]^2
}
b <- b-sum(n)*(sum(n*x)/sum(n))^2
c(a,b)
}
ccc<-NULL
ddd<-NULL
for(i in 1:1000){
tmp<-f()
ccc<-c(ccc,tmp[1])
ddd<-c(ddd,tmp[2])
}
plot(ccc,ddd)
f <- function(){
n<- NULL
n[1] <- 10
n[2] <- 100
n[3] <- 100
x <- rep(0,3)
x[1]=rnorm(1,0,1/n[1])
x[2]=rnorm(1,0,1/n[2])
x[3]=rnorm(1,0,1/n[3])
a <- 0
for(i in 2:3)for(j in 1:(i-1)){
a<- a+n[i]*n[j]/(n[i]+n[j])*(x[i]-x[j])^2
}
b <- 0
for(i in 1:3){
b<- b+n[i]*x[i]^2
}
b <- b-sum(n)*(sum(n*x)/sum(n))^2
c(a,b)
}
ccc<-NULL
ddd<-NULL
for(i in 1:1000){
tmp<-f()
ccc<-c(ccc,tmp[1])
ddd<-c(ddd,tmp[2])
}
plot(ccc,ddd)
f <- function(){
n<- NULL
n[1] <- 10
n[2] <- 100
n[3] <- 100000
x <- rep(0,3)
x[1]=rnorm(1,0,1/n[1])
x[2]=rnorm(1,0,1/n[2])
x[3]=rnorm(1,0,1/n[3])
a <- 0
for(i in 2:3)for(j in 1:(i-1)){
a<- a+n[i]*n[j]/(n[i]+n[j])*(x[i]-x[j])^2
}
b <- 0
for(i in 1:3){
b<- b+n[i]*x[i]^2
}
b <- b-sum(n)*(sum(n*x)/sum(n))^2
c(a,b)
}
ccc<-NULL
ddd<-NULL
for(i in 1:1000){
tmp<-f()
ccc<-c(ccc,tmp[1])
ddd<-c(ddd,tmp[2])
}
plot(ccc,ddd)
setwd("~/Opt")
mydata <- jsonlite::fromJSON("https://api.github.com/repos/jeroenooms/mongolite/issues")
install.packages('curl')
mydata <- jsonlite::fromJSON("https://api.github.com/repos/jeroenooms/mongolite/issues")
mydata
